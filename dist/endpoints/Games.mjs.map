{"version":3,"sources":["../../src/endpoints/Games.ts"],"sourcesContent":["/**\n * The GameApi class provides methods to interact with a game's server.\n * It supports operations like retrieving game tokens, searching for games, and fetching game details.\n */\nexport class GameApi {\n    /**\n     * API client for sending requests to the server.\n     */\n    private apiClient: Record<string, any>;\n  \n    /**\n     * Supported server languages for filtering games.\n     */\n    public availableServerLanguages: string[];\n  \n    /**\n     * Creates an instance of the GameApi class.\n     *\n     * @param apiClient - An object that handles sending requests to the backend API.\n     */\n    constructor(apiClient: Record<string, any>) {\n      this.apiClient = apiClient;\n      this.availableServerLanguages = [\n        \"cs\", \"de\", \"el\", \"en\", \"es\", \"fr\", \"id\", \"it\", \"ja\", \"nl\", \"pl\", \"pt\", \"ru\", \"tr\",\n      ];\n    }\n  \n    /**\n     * Retrieves the token for a specific game.\n     *\n     * @param gameID - The identifier of the game.\n     * @returns A promise resolving to the game token or an error if the game is not found.\n     */\n    async getToken(gameID: number) {\n      const startTime = Date.now();\n      const data = { gameID };\n  \n      let result = await this.apiClient.sendRequest(\"getGameToken\", data);\n      if (result.resultCode !== 0) {\n        result = this.apiClient.errors.getError(\"game not found\");\n      }\n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Searches for games based on various filters.\n     *\n     * @param numEntries - Number of entries to fetch (min 5, max 50). Defaults to 10.\n     * @param page - The page number to fetch. Defaults to 0.\n     * @param lang - Language filter. Defaults to \"en\".\n     * @param filter - Search string for filtering. Optional.\n     * @param scenarioID - Scenario ID for filtering. Optional.\n     * @returns A promise resolving to the search results.\n     */\n    async search(\n      numEntries: number = 10,\n      page: number = 0,\n      lang: string = \"en\",\n      filter: string = \"\",\n      scenarioID: number | null = null\n    ) {\n      const startTime = Date.now();\n  \n      if (!this.availableServerLanguages.includes(lang)) {\n        console.warn(`Language ${lang} does not exist.`);\n        lang = \"en\";\n      }\n      if (numEntries > 50) {\n        console.warn(\"The maximum number of entries allowed is 50.\");\n      } else if (numEntries < 5) {\n        console.warn(\"The minimum number of entries allowed is 5.\");\n      }\n  \n      const data = {\n        numEntriesPerPage: numEntries,\n        page,\n        lang,\n        isFilterSearch: !!filter,\n        search: filter || null,\n        global: 1,\n        loadUserLoginData: 1,\n        scenarioID,\n      };\n  \n      const result = await this.apiClient.sendRequest(\"getGames\", data);\n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches original game overview. This call takes exceedingly longer, which is why {@link getOverview} was created.\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game overview.\n     */\n    async getOverviewOld(gameID: number) {\n      const startTime = Date.now();\n      const data = { gameID };\n  \n      const result = await this.apiClient.sendRequest(\"getGame\", data);\n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches a detailed overview of a game, including properties and player details.\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game overview or an error if the game is not found.\n     */\n    async getOverview(gameID: number) {\n      const startTime = Date.now();\n  \n      const properties = await this.apiClient\n        .sendRequest(\"getGames\", { gameID })\n        .then((result: any) => result.result[0]?.properties);\n  \n      const players = await this.getAdvancedDetails(gameID, 1);\n  \n      if (!properties || typeof players.result !== \"object\") {\n        return this.apiClient.errors.getError(\"game not found\");\n      }\n  \n      const realPlayers = Object.values(players.result.players).filter((x: any) => x.siteUserID > 1);\n  \n      const finalDictionary: any = realPlayers.reduce((dict: any, x: any) => {\n        dict[x.siteUserID] = {\n          siteUserID: x.siteUserID,\n          playerID: x.playerID,\n          login: x.userName,\n          nation: x.nationName,\n          teamID: x.teamID,\n        };\n        return dict;\n      }, {});\n  \n      const userDetails = await Promise.all(\n        Object.keys(finalDictionary).map((siteUserID) =>\n          this.apiClient.Users.getDetails(siteUserID)\n        )\n      );\n  \n      userDetails.forEach((user) => {\n        const userId = user.result.id;\n        if (finalDictionary[userId]) {\n          finalDictionary[userId].profile = user.result;\n        }\n      });\n  \n      const result = {\n        resultCode: 0,\n        resultMessage: \"ok\",\n        result: {\n          logins: Object.values(finalDictionary),\n          properties,\n        },\n        version: \"4831_live\",\n        elapsedTime: Date.now() - startTime,\n      };\n  \n      return result;\n    }\n\n    /**\n     * Fetches an overview of a game, only including properties.\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game overview or an error if the game is not found.\n     */\n    async getOverviewProperties(gameID: number) {\n      const startTime = Date.now();\n  \n      const properties = await this.apiClient\n        .sendRequest(\"getGames\", { gameID })\n        .then((result: any) => result.result[0]?.properties);\n    \n      if (!properties) {\n        return this.apiClient.errors.getError(\"game not found\");\n      }\n  \n      const result = {\n        resultCode: 0,\n        resultMessage: \"ok\",\n        result: properties,\n        version: \"4831_live\",\n        elapsedTime: Date.now() - startTime,\n      };\n  \n      return result;\n    }\n  \n    /**\n     * Fetches advanced game details based on state and state-specific options.\n     *\n     * @param gameID - The unique identifier for the game.\n     * @param stateID - The state ID to fetch. Defaults to 0 which equals all.\n     * @param stateOption - Additional state option. Optional.\n     * @returns A promise resolving to the game details or an error if the game is not found.\n     */\n    async getAdvancedDetails(gameID: number, stateID: number = 0, stateOption: number | null = null) {\n      const startTime = Date.now();\n  \n      const tokenRaw = await this.getToken(gameID);\n      if (tokenRaw.resultCode !== 0) {\n        return this.apiClient.errors.getError(\"game not found\");\n      }\n  \n      const token = tokenRaw.result.token;\n      const data = {\n        gameServer: token.gs,\n        stateID,\n        option: stateOption,\n        rights: token.rights,\n        userAuth: token.authHash,\n        tstamp: token.authTstamp,\n      };\n  \n      const result = await this.apiClient.sendGameRequest(gameID, data);\n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches game details with all states (stateID 0).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game details or an error if the game is not found.\n     */\n    async getDetails(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 0);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches players for a given game (stateID 1).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game players or an error if the game is not found.\n     */\n    async getPlayers(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 1);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches the newspaper for a specific day in the game (stateID 2).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @param day - The day to fetch the newspaper for.\n     * @returns A promise resolving to the game newspaper or an error if the game is not found.\n     */\n    async getNewspaper(gameID: number, day: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 2, day);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches all newspapers for a game (stateID 2).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to all the game newspapers or an error if the game is not found.\n     */\n    async getAllNewspaper(gameID: number) {\n      const startTime = Date.now();\n  \n      const resultLastDay = await this.getAdvancedDetails(gameID, 2);\n      const lastDay = resultLastDay.result.day;\n  \n      const allNewspaper = await Promise.all(\n        (Array.from({ length: lastDay + 1 }, (_, i) => i)).map((day) =>\n          this.getNewspaper(gameID, day).then((x) => {\n            return x.result;\n          })\n        )\n      );\n  \n      const result = {\n        resultCode: 0,\n        resultMessage: \"ok\",\n        result: allNewspaper,\n        version: \"4831_live\",\n        elapsedTime: Date.now() - startTime,\n      };\n  \n      return result;\n    }\n  \n    /**\n     * Fetches provinces data for a given game (stateID 3).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the provinces data or an error if the game is not found.\n     */\n    async getProvinces(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 3);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches a map with province statistics for a given game (stateID 3).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the map with province statistics or an error if the game is not found.\n     */\n    async getMap(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 3);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n\n    /**\n     * Fetches the scenario statistics for a game (stateID 12).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the scenario statistics or an error if the game is not found.\n     */\n    async getScenarioStatistics(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 12);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches game-related statistics (stateID 30).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game statistics or an error if the game is not found.\n     */\n    async getStatistics(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 30);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n  }\n  "],"mappings":"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","names":["result"]}