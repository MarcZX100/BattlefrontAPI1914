{"version":3,"sources":["../../src/endpoints/Util.ts"],"sourcesContent":["export class UtilApi {\n  private apiClient: Record<string, any>;\n  private contentItems: Record<string, any>;\n\n  /**\n   * Creates an instance of the UtilApi class.\n   * @param {Record<string, any>} apiClient - The API client instance used to send requests.\n   */\n  constructor(apiClient: Record<string, any>) {\n    this.apiClient = apiClient;\n    this.contentItems = {};\n  }\n\n  /**\n   * Retrieves content items for a specific language.\n   * The content items include various game elements such as units, upgrades, ranks, awards, etc.\n   * \n   * @param {string} [lang=\"en\"] - The language for which to retrieve the content items (default is English).\n   * @returns {Promise<any>} - A promise resolving to the content items in the specified language.\n   */\n  async getContentItems(lang: string = \"en\") {\n    const startTime = Date.now();\n\n    const data = {\n      locale: lang,\n      units: 1,\n      upgrades: 1,\n      ranks: 1,\n      awards: 1,\n      mods: 1,\n      premiums: 1,\n      scenarios: 1,\n      title: 1,\n      researches: 1,\n      item_packs: 1\n    };\n\n    const result = await this.apiClient.sendRequest(\"getContentItems\", data);\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n\n  /**\n   * Retrieves content items for a specific language.\n   * This method fetches the content items by first searching for a game and then getting its associated items.\n   * This way, items are more complete in regards of data and are also already properly organized.\n   * \n   * @param {string} [lang=\"en\"] - The language for which to retrieve the complete content items (default is English).\n   * @returns {Promise<any>} - A promise resolving to the complete content items associated with the game.\n   */\n  async getCompleteContentItems(lang: string = \"en\") {\n    const startTime = Date.now();\n\n    // Fetch the list of games in the specified language\n    const gameList = await this.apiClient.Games.search(5, 0, lang, \"\", 8);\n    const targetGameID = gameList.result.games[0].properties.gameID;\n\n    // Get the items for the specific game\n    const result = await this.apiClient.Games.getItems(targetGameID);\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n\n  /**\n   * Loads the complete content items and stores them in the `contentItems` property.\n   * This method calls `getCompleteContentItems` and updates the `contentItems` state.\n   * \n   * @param {string} [lang=\"en\"] - The language for which to load the complete content items (default is English).\n   * @returns {Promise<Record<string, any>>} - A promise resolving to the loaded content items.\n   */\n  async loadContentItems(lang: string = \"en\") {\n    this.contentItems = await this.getCompleteContentItems(lang).then((result) => { return result.result; });\n    return this.contentItems;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAO,IAAM,UAAN,MAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAQnB,YAAY,WAAgC;AAC1C,SAAK,YAAY;AACjB,SAAK,eAAe,CAAC;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASM,gBAAgB,OAAe,MAAM;AAAA;AACzC,YAAM,YAAY,KAAK,IAAI;AAE3B,YAAM,OAAO;AAAA,QACX,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,UAAU;AAAA,QACV,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,UAAU;AAAA,QACV,WAAW;AAAA,QACX,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,YAAY;AAAA,MACd;AAEA,YAAM,SAAS,MAAM,KAAK,UAAU,YAAY,mBAAmB,IAAI;AACvE,aAAO,cAAe,KAAK,IAAI,IAAI;AACnC,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUM,wBAAwB,OAAe,MAAM;AAAA;AACjD,YAAM,YAAY,KAAK,IAAI;AAG3B,YAAM,WAAW,MAAM,KAAK,UAAU,MAAM,OAAO,GAAG,GAAG,MAAM,IAAI,CAAC;AACpE,YAAM,eAAe,SAAS,OAAO,MAAM,CAAC,EAAE,WAAW;AAGzD,YAAM,SAAS,MAAM,KAAK,UAAU,MAAM,SAAS,YAAY;AAC/D,aAAO,cAAe,KAAK,IAAI,IAAI;AACnC,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASM,iBAAiB,OAAe,MAAM;AAAA;AAC1C,WAAK,eAAe,MAAM,KAAK,wBAAwB,IAAI,EAAE,KAAK,CAAC,WAAW;AAAE,eAAO,OAAO;AAAA,MAAQ,CAAC;AACvG,aAAO,KAAK;AAAA,IACd;AAAA;AACF;","names":[]}