{"version":3,"sources":["../../src/endpoints/Users.ts"],"sourcesContent":["type UserSearch = {\n  userID: string;\n  username: string;\n  avatar: string;\n  disable: string;\n  deleted: string;\n};\n\nexport class UserApi {\n  private apiClient: Record<string, any>;\n  private defaultUserOptionsArray: Array<string>;\n  private allUserOptionsArray: Array<string>;\n  private rankingOptionsArray: Array<string>;\n\n  /**\n   * Creates an instance of the UserApi class.\n   * @param {Record<string, any>} apiClient - The API client instance used to send requests.\n   */\n  constructor(apiClient: Record<string, any>) {\n    this.apiClient = apiClient;\n    this.defaultUserOptionsArray = [\"username\", \"avatarURL\", \"regTstamp\", \"alliance\", \"rankProgress\", \"gameStats\"];\n    this.allUserOptionsArray = [\"acl\", \"alliance\", \"allianceInvites\", \"allianceMemberShip\", \"askForEmail\", \"askForPassword\", \"avatarURL\", \"country\", \"deletionStatus\", \"email\", \"emailChangeRequest\", \"inventory\", \"isPaying\", \"battlePassProgress\", \"lastOfferPurchaseTimeSeconds\", \"links\", \"minModVersion\", \"notifications\", \"pushNotificationPreferences\", \"rank\", \"rankProgress\", \"referrer\", \"regTstamp\", \"shopPlatform\", \"showSocialMediaButtons\", \"isAllowedToShowStoreLinks\", \"sources\", \"subscriptions\", \"unreadMessages\", \"useFastPaypalCheckout\", \"username\", \"useShop2017\", \"canAdjustEmail\", \"shouldDisableInGameUserRegistration\", \"canUseInventorySystem\", \"publisherID\", \"qualityMatchAdsSupport\", \"useFirefly\", \"mayUseGgsShopWithoutPaymentMethods\",\"stats\",\"scenarioStats\",\"awardProgress\", \"gameStats\"];\n    this.rankingOptionsArray = [\"monthRank\", \"weekRank\", \"globalRank\", \"highestMonthRank\", \"highestWeekRank\", \"lastMonthRank\", \"lastWeekRank\"];\n  }\n\n  /**\n   * Retrieves detailed information for a specific user by their user ID.\n   * Allows for the selection of specific properties to retrieve.\n   * \n   * @param {number} userID - The unique identifier of the user.\n   * @param {string[]} [options=this.defaultUserOptionsArray] - Optional list of user properties to include in the response.\n   * @returns {Promise<any>} - A promise resolving to the user details, including the requested properties.\n   */\n  async getDetails(userID: number, options: string[] = this.defaultUserOptionsArray): Promise<any> {\n    const startTime = Date.now();\n\n    const data: Record<string, any> = { userID };\n\n    if (Array.isArray(options)) {\n      options.forEach((option) => {\n        if ((this.allUserOptionsArray).includes(option)) {\n          data[option] = 1;\n        } else {\n          console.warn(`The \"${option}\" option does not exist.`);\n        }\n      });\n    }\n\n    const result = await this.apiClient.sendRequest(\"getUserDetails\", data);\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n\n  /**\n   * Searches for a user by their username.\n   * Optionally allows for an exact match search.\n   * \n   * @param {string} username - The username to search for.\n   * @param {boolean} [exactResult=false] - Flag to indicate whether the search should return only an exact match.\n   * @returns {Promise<any>} - A promise resolving to the search results.\n   */\n  async search(username: string, exactResult: boolean = false) {\n    const startTime = Date.now();\n\n    const data = {\n      username: username\n    };\n\n    const result = await this.apiClient.sendRequest(\"searchUser\", data);\n    if (exactResult) {\n      if ((result.result).find((x: UserSearch) => (x.username).toLowerCase() == username.toLowerCase())) {\n        result.result = [(result.result).find((x: UserSearch) => (x.username).toLowerCase() == username.toLowerCase())];\n      } else {\n        result.resultCode = -1;\n        result.resultMessage = \"not found\";\n      }\n    }\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n\n  /**\n   * Sends a private message (PM) to a user.\n   * \n   * @param {number} targetUserID - The user ID of the recipient.\n   * @param {string} subject - The subject of the message.\n   * @param {string} body - The body/content of the message.\n   * @returns {Promise<any>} - A promise resolving to the result of the message sending request.\n   */\n  async sendMail(targetUserID: number, subject: string, body: string) {\n    const startTime = Date.now();\n\n    const data = {\n      receiverID: targetUserID,\n      subject: subject,\n      body: body,\n      mode: \"pm\"\n    };\n\n    const result = await this.apiClient.sendRequest(\"sendMessage\", data);\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n\n  /**\n   * Retrieves a ranking list based on a specified ranking type.\n   * Allows pagination and selection of the number of entries to return.\n   * \n   * @param {string} [type=\"globalRank\"] - The type of ranking to fetch. Types allowed: \"monthRank\", \"weekRank\", \"globalRank\", \"highestMonthRank\", \"highestWeekRank\", \"lastMonthRank\", \"lastWeekRank\".\n   * @param {number} [page=0] - The page number for pagination.\n   * @param {number} [numEntries=10] - The number of entries to retrieve per page.\n   * @returns {Promise<any>} - A promise resolving to the ranking data for the selected type.\n   */\n  async getRanking(type: string = \"globalRank\", page: number = 0, numEntries: number = 10) {\n    const startTime = Date.now();\n\n    if (numEntries > 50){\n      console.warn(\"The maximum number of entries allowed is 50.\");\n    } else if (numEntries < 5) {\n      console.warn(\"The minimum number of entries allowed is 5.\");\n    }\n\n    const data = {\n      type: type,\n      page: page,\n      numEntries: numEntries\n    };\n\n    if (!(this.rankingOptionsArray).includes(type)) {\n      return {\n        resultCode: -1,\n        resultMessage: \"incorrect option\",\n        result: `The ${type} type does not exist.`,\n        elapsedTime: (Date.now() - startTime),\n        receivedData: data\n      };\n    }\n\n    const result = await this.apiClient.sendRequest(\"getRankingFirefly\", data);\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n}\n"],"mappings":"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","names":[]}