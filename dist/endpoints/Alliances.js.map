{"version":3,"sources":["../../src/endpoints/Alliances.ts"],"sourcesContent":["/**\n * Represents the API client for managing and retrieving information about alliances.\n */\nexport class AllianceApi {\n  /**\n   * The API client instance used to send requests.\n   */\n  private apiClient: Record<string, any>;\n\n  /**\n   * Constructs a new instance of the `AllianceApi` class.\n   * \n   * @param apiClient - The API client instance for sending requests.\n   */\n  constructor(apiClient: Record<string, any>) {\n    this.apiClient = apiClient;\n  }\n\n  /**\n   * Retrieves detailed information about a specific alliance.\n   * \n   * @param allianceID - The alliance's identifier.\n   * @param members - Whether to include the list of alliance members in the response. Defaults to `true`.\n   * @returns A promise resolving to the details of the specified alliance, including elapsed time.\n   */\n  async getDetails(allianceID: number, members: boolean = true) {\n    const startTime = Date.now();\n    const data = {\n      allianceID: allianceID,\n      members: members ? 1 : 0,\n      invites: 0,\n    };\n\n    const result = await this.apiClient.sendRequest(\"getAlliance\", data);\n    result.elapsedTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Retrieves battle statistics for a given alliance.\n   * \n   * @param allianceID - The alliance's identifier.\n   * @returns A promise resolving to the battle statistics of the specified alliance, including elapsed time.\n   */\n  async getBattles(allianceID: number) {\n    const startTime = Date.now();\n    const data = {\n      allianceID: allianceID,\n    };\n\n    const result = await this.apiClient.sendRequest(\"getAllianceBattleStats\", data);\n    result.elapsedTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Searches for alliances by name.\n   * \n   * @param name - The name of the alliance to search for.\n   * @param exactResult - Whether to return only exact matches for the alliance name. Defaults to `false`.\n   * @returns A promise resolving to the search results, including elapsed time.\n   * If `exactResult` is `true`, only exact matches are returned.\n   * If no matches are found, the result code and message indicate \"not found.\"\n   */\n  async search(name: string, exactResult: boolean = false) {\n    const startTime = Date.now();\n    const data = {\n      name: name,\n    };\n\n    const result = await this.apiClient.sendRequest(\"searchAlliance\", data);\n    if (exactResult) {\n      const exactMatch = (result.result).find(\n        (x: AllianceSearch) => x.properties.name.toLowerCase() === name.toLowerCase()\n      );\n      if (exactMatch) {\n        result.result = [exactMatch];\n      } else {\n        result.resultCode = -1;\n        result.resultMessage = \"not found\";\n      }\n    }\n    if ((result.result).length === 0) {\n      result.resultCode = -1;\n      result.resultMessage = \"not found\";\n    }\n    result.elapsedTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Retrieves the alliance ranking, paginated by the specified page and number of entries.\n   * \n   * @param page - The page of the ranking to retrieve. Defaults to `0`.\n   * @param numEntries - The number of entries to retrieve per page. Defaults to `10`.\n   *                     Must be between `10` and `50`. If out of range, a warning is logged.\n   * @returns A promise resolving to the alliance ranking, including elapsed time.\n   */\n  async getRanking(page: number = 0, numEntries: number = 10) {\n    const startTime = Date.now();\n\n    if (numEntries > 50) {\n      console.warn(\"The maximum number of entries allowed is 50.\");\n    } else if (numEntries < 10) {\n      console.warn(\"The minimum number of entries allowed is 10.\");\n    }\n\n    const data = {\n      page: page,\n      numEntries: numEntries,\n    };\n\n    const result = await this.apiClient.sendRequest(\"getAllianceRanking\", data);\n    result.elapsedTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Retrieves a list of open alliances. The result typically includes 30 alliances\n   * that are not full, but the response cannot be further filtered.\n   * \n   * @returns A promise resolving to the list of open alliances, including elapsed time.\n   */\n  async getOpenAlliances() {\n    const startTime = Date.now();\n    const data = {};\n\n    const result = await this.apiClient.sendRequest(\"getAlliances\", data);\n    result.elapsedTime = Date.now() - startTime;\n    return result;\n  }\n}\n\n/**\n * Type representing the structure of an alliance search result.\n */\ntype AllianceSearch = {\n  \"@c\": string;\n  properties: Record<any, any>;\n  stats: Record<any, any>;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGO,IAAM,cAAN,MAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWvB,YAAY,WAAgC;AAC1C,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASM,WAAW,YAAoB,UAAmB,MAAM;AAAA;AAC5D,YAAM,YAAY,KAAK,IAAI;AAC3B,YAAM,OAAO;AAAA,QACX;AAAA,QACA,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,MACX;AAEA,YAAM,SAAS,MAAM,KAAK,UAAU,YAAY,eAAe,IAAI;AACnE,aAAO,cAAc,KAAK,IAAI,IAAI;AAClC,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQM,WAAW,YAAoB;AAAA;AACnC,YAAM,YAAY,KAAK,IAAI;AAC3B,YAAM,OAAO;AAAA,QACX;AAAA,MACF;AAEA,YAAM,SAAS,MAAM,KAAK,UAAU,YAAY,0BAA0B,IAAI;AAC9E,aAAO,cAAc,KAAK,IAAI,IAAI;AAClC,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWM,OAAO,MAAc,cAAuB,OAAO;AAAA;AACvD,YAAM,YAAY,KAAK,IAAI;AAC3B,YAAM,OAAO;AAAA,QACX;AAAA,MACF;AAEA,YAAM,SAAS,MAAM,KAAK,UAAU,YAAY,kBAAkB,IAAI;AACtE,UAAI,aAAa;AACf,cAAM,aAAc,OAAO,OAAQ;AAAA,UACjC,CAAC,MAAsB,EAAE,WAAW,KAAK,YAAY,MAAM,KAAK,YAAY;AAAA,QAC9E;AACA,YAAI,YAAY;AACd,iBAAO,SAAS,CAAC,UAAU;AAAA,QAC7B,OAAO;AACL,iBAAO,aAAa;AACpB,iBAAO,gBAAgB;AAAA,QACzB;AAAA,MACF;AACA,UAAK,OAAO,OAAQ,WAAW,GAAG;AAChC,eAAO,aAAa;AACpB,eAAO,gBAAgB;AAAA,MACzB;AACA,aAAO,cAAc,KAAK,IAAI,IAAI;AAClC,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUM,WAAW,OAAe,GAAG,aAAqB,IAAI;AAAA;AAC1D,YAAM,YAAY,KAAK,IAAI;AAE3B,UAAI,aAAa,IAAI;AACnB,gBAAQ,KAAK,8CAA8C;AAAA,MAC7D,WAAW,aAAa,IAAI;AAC1B,gBAAQ,KAAK,8CAA8C;AAAA,MAC7D;AAEA,YAAM,OAAO;AAAA,QACX;AAAA,QACA;AAAA,MACF;AAEA,YAAM,SAAS,MAAM,KAAK,UAAU,YAAY,sBAAsB,IAAI;AAC1E,aAAO,cAAc,KAAK,IAAI,IAAI;AAClC,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQM,mBAAmB;AAAA;AACvB,YAAM,YAAY,KAAK,IAAI;AAC3B,YAAM,OAAO,CAAC;AAEd,YAAM,SAAS,MAAM,KAAK,UAAU,YAAY,gBAAgB,IAAI;AACpE,aAAO,cAAc,KAAK,IAAI,IAAI;AAClC,aAAO;AAAA,IACT;AAAA;AACF;","names":[]}