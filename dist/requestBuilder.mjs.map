{"version":3,"sources":["../src/requestBuilder.ts"],"sourcesContent":["import { sha1 } from 'js-sha1';\n\n/**\n * A utility class for constructing and preparing API requests.\n */\nexport class RequestBuilder {\n  /**\n   * Extracts the value of a specific query parameter from a given URL.\n   *\n   * @param name - The name of the parameter to retrieve.\n   * @param url - The URL string to parse for the parameter.\n   * @returns The value of the parameter if found, otherwise `null`.\n   *\n   * @example\n   * ```typescript\n   * const url = \"https://www.supremacy1914.com/index.php?action=log&hash=yes&outputFormat=json&L=0\";\n   * const value = RequestBuilder.getParameterByName(\"outputFormat\", url);\n   * console.log(value); // Outputs: \"0\"\n   * ```\n   */\n  static getParameterByName(name: string, url: string): string | null {\n    const regex = new RegExp(`[?&]${name.replace(/[[]]/g, '\\\\$&')}(=([^&#]*)|&|#|$)`);\n    const results = regex.exec(url);\n    return results ? decodeURIComponent(results[2]?.replace(/\\+/g, ' ') || '') : null;\n  }\n\n  /**\n   * Prepares an API request by encoding data, generating hashes, and constructing the request URL and payload.\n   *\n   * @param action - The API action or endpoint being invoked.\n   * @param data - The payload to be sent with the request as key-value pairs.\n   * @param config - Configuration object containing keys, user information, and other API settings.\n   *   - `config.webapi.key` - The API key.\n   *   - `config.webapi.version` - The API version.\n   *   - `config.uber.authTstamp` - The authentication timestamp.\n   *   - `config.uber.authHash` - The authentication hash.\n   *   - `config.userId` - The ID of the authenticated user.\n   *   - `config.trackingSource` - The source of the tracking data.\n   *   - `config.websiteURL` - The base URL for the API.\n   *   - Amongst many others.\n   *\n   * @returns An object containing:\n   *   - `url`: The constructed request URL.\n   *   - `postData`: The encoded payload to send with the request.\n   *   - `type`: The HTTP method to use (always \"POST\").\n   *\n   * @example\n   * ```typescript\n   * const action = \"getUserDetails\";\n   * const data = { userID: 12345 };\n   * const config = {\n   *   webapi: { key: \"apiKey\", version: \"1.0\" },\n   *   uber: { authTstamp: \"1276123139\", authHash: \"secureHash\" },\n   *   userId: \"user123\",\n   *   trackingSource: \"web\",\n   *   websiteURL: \"https://supremacy1914.com/\",\n   * };\n   *\n   * const requestDetails = RequestBuilder.prepare(action, data, config);\n   * console.log(requestDetails);\n   * // Outputs:\n   * // {\n   * //   url: \"https://supremacy1914.com/index.php?eID=api&key=apiKey&action=getUserDetails&hash=...\",\n   * //   postData: \"data=...\",\n   * //   type: \"POST\",\n   * // }\n   * ```\n   */\n  static prepare(action: string, data: Record<string, any>, config: Record<string, any>) {\n    const { key } = config.webapi;\n    const { authTstamp, authHash } = config.uber;\n    const { userId, trackingSource, websiteURL } = config;\n\n    if (key !== 'open') {\n      Object.assign(data, { authTstamp, authUserID: userId });\n    }\n    data.source = trackingSource;\n\n    const asParam = Object.entries(data)\n      .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v ?? '')}`)\n      .join('&');\n\n    const encoded = btoa(asParam);\n    const postData = `data=${encoded}`;\n    const hashBase = key === 'open'\n      ? `${key}${action}${encodeURIComponent(encoded)}`\n      : `${key}${action}${asParam}${authHash}`;\n\n    const hash = sha1(hashBase);\n    const L = this.getParameterByName('L', websiteURL) || 0;\n\n    const apiUrl = `${websiteURL}index.php?eID=api&key=${key}`;\n    const url = `${apiUrl}&action=${action}&hash=${hash}&outputFormat=json&apiVersion=${config.webapi.version}&L=${L}&source=${trackingSource}`;\n    \n    return { url, postData, type: 'POST' };\n  }\n}\n"],"mappings":";AAAA,SAAS,YAAY;AAKd,IAAM,iBAAN,MAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAe1B,OAAO,mBAAmB,MAAc,KAA4B;AApBtE;AAqBI,UAAM,QAAQ,IAAI,OAAO,OAAO,KAAK,QAAQ,SAAS,MAAM,CAAC,mBAAmB;AAChF,UAAM,UAAU,MAAM,KAAK,GAAG;AAC9B,WAAO,UAAU,qBAAmB,aAAQ,CAAC,MAAT,mBAAY,QAAQ,OAAO,SAAQ,EAAE,IAAI;AAAA,EAC/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4CA,OAAO,QAAQ,QAAgB,MAA2B,QAA6B;AACrF,UAAM,EAAE,IAAI,IAAI,OAAO;AACvB,UAAM,EAAE,YAAY,SAAS,IAAI,OAAO;AACxC,UAAM,EAAE,QAAQ,gBAAgB,WAAW,IAAI;AAE/C,QAAI,QAAQ,QAAQ;AAClB,aAAO,OAAO,MAAM,EAAE,YAAY,YAAY,OAAO,CAAC;AAAA,IACxD;AACA,SAAK,SAAS;AAEd,UAAM,UAAU,OAAO,QAAQ,IAAI,EAChC,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,mBAAmB,CAAC,CAAC,IAAI,mBAAmB,gBAAK,EAAE,CAAC,EAAE,EACzE,KAAK,GAAG;AAEX,UAAM,UAAU,KAAK,OAAO;AAC5B,UAAM,WAAW,QAAQ,OAAO;AAChC,UAAM,WAAW,QAAQ,SACrB,GAAG,GAAG,GAAG,MAAM,GAAG,mBAAmB,OAAO,CAAC,KAC7C,GAAG,GAAG,GAAG,MAAM,GAAG,OAAO,GAAG,QAAQ;AAExC,UAAM,OAAO,KAAK,QAAQ;AAC1B,UAAM,IAAI,KAAK,mBAAmB,KAAK,UAAU,KAAK;AAEtD,UAAM,SAAS,GAAG,UAAU,yBAAyB,GAAG;AACxD,UAAM,MAAM,GAAG,MAAM,WAAW,MAAM,SAAS,IAAI,iCAAiC,OAAO,OAAO,OAAO,MAAM,CAAC,WAAW,cAAc;AAEzI,WAAO,EAAE,KAAK,UAAU,MAAM,OAAO;AAAA,EACvC;AACF;","names":[]}