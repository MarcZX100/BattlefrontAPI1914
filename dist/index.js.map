{"version":3,"sources":["../src/index.ts","../src/requestBuilder.ts","../src/errors.ts","../src/endpoints/Util.ts","../src/endpoints/Users.ts","../src/endpoints/Games.ts","../src/endpoints/Alliances.ts"],"sourcesContent":["import { RequestBuilder } from './requestBuilder';\nimport CustomErrors from './errors';\nimport puppeteer from 'puppeteer';\nimport { JSDOM } from \"jsdom\";\n\nimport { UtilApi } from './endpoints/Util';\nimport { UserApi } from './endpoints/Users';\nimport { GameApi } from './endpoints/Games';\nimport { AllianceApi } from './endpoints/Alliances';\n\n/**\n * Represents the BytroFront client, providing access to various API endpoints\n * and utilities for interacting with the game server.\n */\nexport class BytroFront {\n  private config: Record<string, any>;\n  private errors: Record<string, any>;\n\n  /** Provides access to utility-related API methods and tools. */\n  public Util: UtilApi;\n  /** Provides access to user-related API methods. */\n  public Users: UserApi;\n  /** Provides access to game-related API methods. */\n  public Games: GameApi;\n  /** Provides access to alliance-related API methods. */\n  public Alliances: AllianceApi;\n\n  /**\n   * Initializes the API client with a configuration object and sets up endpoint access.\n   * If the config was generated with the generateConfig method, the class's config will update automatically every 6 days\n   * \n   * @param config - A configuration object containing settings required for API communication.\n   */\n  constructor(config: Record<string, any>) {\n    this.config = config;\n    this.errors = CustomErrors;\n\n    this.Util = new UtilApi(this);\n    this.Users = new UserApi(this);\n    this.Games = new GameApi(this);\n    this.Alliances = new AllianceApi(this);\n\n    if (this.config.customPackageDetails && this.config.customPackageDetails.autoGenerate) {\n      setInterval(async () => {\n        this.config = await BytroFront.generateConfig(this.config.customPackageDetails.username, this.config.customPackageDetails.password, this.config.customPackageDetails.domain);\n        console.log(this.config)\n      }, 6 * 24 * 60 * 60 * 1000); // 6 days in milliseconds\n    }\n  }\n\n  /**\n   * Sends a generic request to the API server with the specified action and data payload.\n   *\n   * @template T - The expected return type of the response.\n   * @param action - The action or endpoint to call on the API server.\n   * @param data - The payload data to include in the request, provided as key-value pairs.\n   * @returns A promise resolving to the response from the server.\n   * @throws Will throw an error if the request fails or if the server returns a non-OK status.\n   *\n   * @example\n   * ```typescript\n   * const response = await api.sendRequest('getUserDetails', { userID: 48035824 });\n   * console.log(response);\n   * ```\n   */\n  async sendRequest<T>(action: string, data: Record<string, any>): Promise<T> {\n    const { url, postData, type } = RequestBuilder.prepare(action, data, this.config);\n\n    try {\n      const response = await fetch(url, {\n        headers: {\n          'accept': '*/*',\n          'accept-language': 'en-US,en;q=0.9',\n          'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',\n          'x-requested-with': 'XMLHttpRequest',\n        },\n        body: type === 'POST' ? postData : undefined,\n        method: type,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP request failed with status: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Sends a game-specific request to a specified game server.\n   *\n   * @template T - The expected return type of the response.\n   * @param gameID - The unique identifier of the game.\n   * @param data - The payload data to include in the request, including game-specific details.\n   * @returns A promise resolving to the response from the game server, typed as `T`.\n   * @throws Will throw an error if the request fails or if the server returns a non-OK status.\n   *\n   * @example\n   * ```typescript\n   * const response = await api.sendGameRequest<GameState>('9182721', {\n   *   gameServer: 'xxxxxxxx.c.bytro.com',\n   *   stateID: 2,\n   *   option: 3,\n   *   rights: 'chat',\n   *   userAuth: 'hash',\n   *   tstamp: '1982337111',\n   * });\n   * console.log(response);\n   * ```\n   */\n  async sendGameRequest<T>(gameID: string, data: Record<string, any>): Promise<T> {\n    try {\n      const response = await fetch(`https://${data.gameServer}/`, {\n        headers: {\n          accept: \"text/plain, */*; q=0.01\",\n          \"accept-language\": \"en-US,en;q=0.9\",\n          \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n        },\n        body: JSON.stringify({\n          requestID: 0,\n          \"@c\": \"ultshared.action.UltUpdateGameStateAction\",\n          actions: [\n            {\n              requestID: \"actionReq-1\",\n              \"@c\": \"ultshared.action.UltLoginAction\",\n              resolution: \"1920x1080\",\n            },\n          ],\n          lastCallDuration: 0,\n          client: \"s1914-client-ultimate\",\n          siteUserID: 0,\n          adminLevel: 0,\n          gameID: gameID,\n          playerID: 0,\n          stateType: data.stateID,\n          option: data.option,\n          rights: data.rights,\n          userAuth: data.userAuth,\n          tstamp: data.tstamp,\n        }),\n        method: \"POST\",\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP request failed with status: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`Error during call to server \"${data.gameServer}\":`, error);\n\n      throw error;\n    }\n  }\n\n  /**\n * Generates a configuration object by simulating a login process for the specified domain.\n *\n * This method uses Puppeteer to automate a browser session and interacts with the login\n * page of the given domain. After logging in, it retrieves an iframe source, navigates to it,\n * and extracts the configuration object from the page.\n *\n * @param username - The username to log in with.\n * @param password - The password to log in with.\n * @param domain - The domain to target for login and configuration retrieval. Defaults to \"supremacy1914.com\".\n *                 Examples:\n *                 - \"supremacy1914.com\" for Supremacy 1914 (default)\n *                 - \"callofwar.com\" for Call of War\n *                 - \"ironorder1919.com\" for Iron Order\n *                 - \"supremacy1914.es\" for the Spanish version of Supremacy 1914 (still allows data scrapping in other languages)\n * @param autoGenerate - Whether to auto generate login every 6 days when being handled by BytroFront instance.\n * @returns A Promise resolving to the configuration object extracted from the domain.\n * @throws An error if the iframe source cannot be located or if the configuration retrieval fails.\n *\n * @example\n * ```typescript\n * const config = await generateConfig(\"exampleUser\", \"examplePass\", \"callofwar.com\");\n * console.log(config);\n * ```\n */\n  static async generateConfig(\n    username: string,\n    password: string,\n    domain: string = \"supremacy1914.com\",\n    autoGenerate: boolean = true\n  ): Promise<any> {\n    let browser: any;\n    let page: any;\n    let newPage: any;\n  \n    try {\n      // Validate inputs\n      if (!username || !password) {\n        throw new Error(\"Username and password are required\");\n      }\n  \n      const enlace = `https://www.${domain}/index.php?id=188`;\n  \n      // Launch Puppeteer browser\n      browser = await puppeteer.launch({ headless: true });\n      page = await browser.newPage();\n  \n      // Navigate to the login page\n      await page.goto(enlace);\n  \n      // Handle login button clicks (sup & io vs cow)\n      try {\n        await page.click(\".login_text\"); // For supremacy1914 and iron order\n      } catch {\n        await page.click(\"#sg_login_text\"); // For call of war\n      }\n  \n      // Input username and password\n      await page.type(\"#loginbox_login_input\", username);\n      await page.type(\"#loginbox_password_input\", password);\n  \n      // Click login button\n      await page.click(\"#func_loginbutton\");\n  \n      // Wait for iframe response\n      const iframeSrc: any = await Promise.race([\n        new Promise<string>((resolve, reject) => {\n          const timeout = setTimeout(() => reject(new Error(\"Iframe response timed out\")), 10000); // Timeout after 10 seconds\n          page.on(\"response\", async (response: any) => {\n            if (response.url().endsWith(\"/game.php?bust=1\")) {\n              clearTimeout(timeout);\n              const responseBody = await response.text();\n              const dom = new JSDOM(responseBody);\n              const iframe = dom.window.document.querySelector(\"#ifm\") as HTMLIFrameElement | null;\n              resolve(iframe ? iframe.src : \"\");\n            }\n          });\n        }),\n        new Promise((_, reject) => setTimeout(() => reject(new Error(\"Iframe response timed out\")), 10000)),\n      ]);\n  \n      if (!iframeSrc) {\n        throw new Error(\"Iframe source not found\");\n      }\n  \n      // Close the login page\n      page.removeAllListeners('response'); // Remove listeners\n      await page.close();\n  \n      // Open the iframe source in a new page\n      newPage = await browser.newPage();\n      await newPage.goto(iframeSrc);\n  \n      // Extract configuration from the new page\n      const config: any = await Promise.race([\n        new Promise<any>((resolve, reject) => {\n          const timeout = setTimeout(() => reject(new Error(\"Config response timed out\")), 10000); // Timeout after 10 seconds\n          newPage.on(\"response\", async (response: any) => {\n            try {\n              if (response.url().includes(\"/index.php?action=getGames\")) {\n                const config = await newPage.evaluate(() => {\n                  const hupConfig = (window as any).hup?.config ?? null;\n                  return hupConfig;\n                });\n                clearTimeout(timeout);\n                if (config) {\n                  config.customPackageDetails = { username, password, domain, autoGenerate };\n                  resolve(config);\n                } else {\n                  reject(new Error(\"Config not found in the page\"));\n                }\n              }\n            } catch (error) {\n              clearTimeout(timeout);\n              reject(error);\n            }\n          });\n        }),\n        new Promise((_, reject) => setTimeout(() => reject(new Error(\"Config response timed out\")), 10000)),\n      ]);\n  \n      if (!config) {\n        throw new Error(\"Failed to retrieve configuration\");\n      }\n  \n      return config;\n    } catch (error) {\n      console.error(\"Error in generateConfig:\", error);\n      throw error; // Rethrow the error for the caller to handle\n    } finally {\n      // Ensure resources are cleaned up\n      if (newPage && !newPage.isClosed()) {\n        newPage.removeAllListeners('response'); // Remove listeners\n        await newPage.close();\n      }\n      if (page && !page.isClosed()) {\n        page.removeAllListeners('response'); // Remove listeners\n        await page.close();\n      }\n      if (browser) await browser.close();\n    }\n  }\n  \n  \n\n}\n","import { sha1 } from 'js-sha1';\n\n/**\n * A utility class for constructing and preparing API requests.\n */\nexport class RequestBuilder {\n  /**\n   * Extracts the value of a specific query parameter from a given URL.\n   *\n   * @param name - The name of the parameter to retrieve.\n   * @param url - The URL string to parse for the parameter.\n   * @returns The value of the parameter if found, otherwise `null`.\n   *\n   * @example\n   * ```typescript\n   * const url = \"https://www.supremacy1914.com/index.php?action=log&hash=yes&outputFormat=json&L=0\";\n   * const value = RequestBuilder.getParameterByName(\"outputFormat\", url);\n   * console.log(value); // Outputs: \"0\"\n   * ```\n   */\n  static getParameterByName(name: string, url: string): string | null {\n    const regex = new RegExp(`[?&]${name.replace(/[[]]/g, '\\\\$&')}(=([^&#]*)|&|#|$)`);\n    const results = regex.exec(url);\n    return results ? decodeURIComponent(results[2]?.replace(/\\+/g, ' ') || '') : null;\n  }\n\n  /**\n   * Prepares an API request by encoding data, generating hashes, and constructing the request URL and payload.\n   *\n   * @param action - The API action or endpoint being invoked.\n   * @param data - The payload to be sent with the request as key-value pairs.\n   * @param config - Configuration object containing keys, user information, and other API settings.\n   *   - `config.webapi.key` - The API key.\n   *   - `config.webapi.version` - The API version.\n   *   - `config.uber.authTstamp` - The authentication timestamp.\n   *   - `config.uber.authHash` - The authentication hash.\n   *   - `config.userId` - The ID of the authenticated user.\n   *   - `config.trackingSource` - The source of the tracking data.\n   *   - `config.websiteURL` - The base URL for the API.\n   *   - Amongst many others.\n   *\n   * @returns An object containing:\n   *   - `url`: The constructed request URL.\n   *   - `postData`: The encoded payload to send with the request.\n   *   - `type`: The HTTP method to use (always \"POST\").\n   *\n   * @example\n   * ```typescript\n   * const action = \"getUserDetails\";\n   * const data = { userID: 12345 };\n   * const config = {\n   *   webapi: { key: \"apiKey\", version: \"1.0\" },\n   *   uber: { authTstamp: \"1276123139\", authHash: \"secureHash\" },\n   *   userId: \"user123\",\n   *   trackingSource: \"web\",\n   *   websiteURL: \"https://supremacy1914.com/\",\n   * };\n   *\n   * const requestDetails = RequestBuilder.prepare(action, data, config);\n   * console.log(requestDetails);\n   * // Outputs:\n   * // {\n   * //   url: \"https://supremacy1914.com/index.php?eID=api&key=apiKey&action=getUserDetails&hash=...\",\n   * //   postData: \"data=...\",\n   * //   type: \"POST\",\n   * // }\n   * ```\n   */\n  static prepare(action: string, data: Record<string, any>, config: Record<string, any>) {\n    const { key } = config.webapi;\n    const { authTstamp, authHash } = config.uber;\n    const { userId, trackingSource, websiteURL } = config;\n\n    if (key !== 'open') {\n      Object.assign(data, { authTstamp, authUserID: userId });\n    }\n    data.source = trackingSource;\n\n    const asParam = Object.entries(data)\n      .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v ?? '')}`)\n      .join('&');\n\n    const encoded = btoa(asParam);\n    const postData = `data=${encoded}`;\n    const hashBase = key === 'open'\n      ? `${key}${action}${encodeURIComponent(encoded)}`\n      : `${key}${action}${asParam}${authHash}`;\n\n    const hash = sha1(hashBase);\n    const L = this.getParameterByName('L', websiteURL) || 0;\n\n    const apiUrl = `${websiteURL}index.php?eID=api&key=${key}`;\n    const url = `${apiUrl}&action=${action}&hash=${hash}&outputFormat=json&apiVersion=${config.webapi.version}&L=${L}&source=${trackingSource}`;\n    \n    return { url, postData, type: 'POST' };\n  }\n}\n","/**\n * Represents a collection of custom error definitions and a utility method\n * for retrieving structured error details based on an error message.\n */\nclass CustomErrors {\n    /**\n     * A map of predefined errors, keyed by their result messages, providing\n     * additional details such as result codes and detailed error descriptions.\n     */\n    private static errors: { \n      [key: string]: { \n        resultCode: number; \n        resultMessageLarge: string; \n        result: any; \n      } \n    } = {\n      \"game not found\": {\n        resultCode: -1,\n        resultMessageLarge: \"The provided game ID was not found. Have you entered the proper client configuration?\",\n        result: null\n      },\n      \"user not found\": {\n        resultCode: -1,\n        resultMessageLarge: \"The provided user ID was not found. Have you entered the proper client configuration?\",\n        result: null\n      }\n    };\n  \n    /**\n     * Retrieves a structured error object based on a given result message.\n     *\n     * @param resultMessage - The error message to look up.\n     * @returns An object containing the error details, including result codes,\n     *          detailed messages, and additional metadata. If the error is not\n     *          found, a default \"unknown error\" response is returned.\n     *\n     * @example\n     * ```typescript\n     * const error = CustomErrors.getError(\"game not found\");\n     * console.log(error);\n     * // {\n     * //   resultCode: -1,\n     * //   resultMessage: \"game not found\",\n     * //   resultMessageLarge: \"The provided game ID was not found. Have you entered the proper client configuration?\",\n     * //   result: null,\n     * //   version: \"4831_live\"\n     * // }\n     * ```\n     */\n    static getError(resultMessage: string): { \n      resultCode: number; \n      resultMessage: string; \n      resultMessageLarge: string; \n      result: any; \n      version: string; \n    } | null {\n      const error = this.errors[resultMessage];\n      return {\n        resultCode: error ? error.resultCode : -1,\n        resultMessage,\n        resultMessageLarge: error ? error.resultMessageLarge : \"Unknown error\",\n        result: error ? error.result : null,\n        version: \"4831_live\" // I don't really know if the real API version changes, so as of now I'll keep it like this.\n      };\n    }\n  }\n  \n  export default CustomErrors;\n  ","export class UtilApi {\n  private apiClient: Record<string, any>;\n  private contentItems: Record<string, any>;\n\n  /**\n   * Creates an instance of the UtilApi class.\n   * @param {Record<string, any>} apiClient - The API client instance used to send requests.\n   */\n  constructor(apiClient: Record<string, any>) {\n    this.apiClient = apiClient;\n    this.contentItems = {};\n  }\n\n  /**\n   * Retrieves content items for a specific language.\n   * The content items include various game elements such as units, upgrades, ranks, awards, etc.\n   * \n   * @param {string} [lang=\"en\"] - The language for which to retrieve the content items (default is English).\n   * @returns {Promise<any>} - A promise resolving to the content items in the specified language.\n   */\n  async getContentItems(lang: string = \"en\") {\n    const startTime = Date.now();\n\n    const data = {\n      locale: lang,\n      units: 1,\n      upgrades: 1,\n      ranks: 1,\n      awards: 1,\n      mods: 1,\n      premiums: 1,\n      scenarios: 1,\n      title: 1,\n      researches: 1,\n      item_packs: 1\n    };\n\n    const result = await this.apiClient.sendRequest(\"getContentItems\", data);\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n\n  /**\n   * Retrieves content items for a specific language.\n   * This method fetches the content items by first searching for a game and then getting its associated items.\n   * This way, items are more complete in regards of data and are also already properly organized.\n   * \n   * @param {string} [lang=\"en\"] - The language for which to retrieve the complete content items (default is English).\n   * @returns {Promise<any>} - A promise resolving to the complete content items associated with the game.\n   */\n  async getCompleteContentItems(lang: string = \"en\") {\n    const startTime = Date.now();\n\n    // Fetch the list of games in the specified language\n    const gameList = await this.apiClient.Games.search(5, 0, lang, \"\", 8);\n    const targetGameID = gameList.result.games[0].properties.gameID;\n\n    // Get the items for the specific game\n    const result = await this.apiClient.Games.getItems(targetGameID);\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n\n  /**\n   * Loads the complete content items and stores them in the `contentItems` property.\n   * This method calls `getCompleteContentItems` and updates the `contentItems` state.\n   * \n   * @param {string} [lang=\"en\"] - The language for which to load the complete content items (default is English).\n   * @returns {Promise<Record<string, any>>} - A promise resolving to the loaded content items.\n   */\n  async loadContentItems(lang: string = \"en\") {\n    this.contentItems = await this.getCompleteContentItems(lang).then((result) => { return result.result; });\n    return this.contentItems;\n  }\n}\n","type UserSearch = {\n  userID: string;\n  username: string;\n  avatar: string;\n  disable: string;\n  deleted: string;\n};\n\nexport class UserApi {\n  private apiClient: Record<string, any>;\n  private defaultUserOptionsArray: Array<string>;\n  private allUserOptionsArray: Array<string>;\n  private rankingOptionsArray: Array<string>;\n\n  /**\n   * Creates an instance of the UserApi class.\n   * @param {Record<string, any>} apiClient - The API client instance used to send requests.\n   */\n  constructor(apiClient: Record<string, any>) {\n    this.apiClient = apiClient;\n    this.defaultUserOptionsArray = [\"username\", \"avatarURL\", \"regTstamp\", \"alliance\", \"rankProgress\", \"gameStats\"];\n    this.allUserOptionsArray = [\"acl\", \"alliance\", \"allianceInvites\", \"allianceMemberShip\", \"askForEmail\", \"askForPassword\", \"avatarURL\", \"country\", \"deletionStatus\", \"email\", \"emailChangeRequest\", \"inventory\", \"isPaying\", \"battlePassProgress\", \"lastOfferPurchaseTimeSeconds\", \"links\", \"minModVersion\", \"notifications\", \"pushNotificationPreferences\", \"rank\", \"rankProgress\", \"referrer\", \"regTstamp\", \"shopPlatform\", \"showSocialMediaButtons\", \"isAllowedToShowStoreLinks\", \"sources\", \"subscriptions\", \"unreadMessages\", \"useFastPaypalCheckout\", \"username\", \"useShop2017\", \"canAdjustEmail\", \"shouldDisableInGameUserRegistration\", \"canUseInventorySystem\", \"publisherID\", \"qualityMatchAdsSupport\", \"useFirefly\", \"mayUseGgsShopWithoutPaymentMethods\",\"stats\",\"scenarioStats\",\"awardProgress\", \"gameStats\"];\n    this.rankingOptionsArray = [\"monthRank\", \"weekRank\", \"globalRank\", \"highestMonthRank\", \"highestWeekRank\", \"lastMonthRank\", \"lastWeekRank\"];\n  }\n\n  /**\n   * Retrieves detailed information for a specific user by their user ID.\n   * Allows for the selection of specific properties to retrieve.\n   * \n   * @param {number} userID - The unique identifier of the user.\n   * @param {string[]} [options=this.defaultUserOptionsArray] - Optional list of user properties to include in the response.\n   * @returns {Promise<any>} - A promise resolving to the user details, including the requested properties.\n   */\n  async getDetails(userID: number, options: string[] = this.defaultUserOptionsArray): Promise<any> {\n    const startTime = Date.now();\n\n    const data: Record<string, any> = { userID };\n\n    if (Array.isArray(options)) {\n      options.forEach((option) => {\n        if ((this.allUserOptionsArray).includes(option)) {\n          data[option] = 1;\n        } else {\n          console.warn(`The \"${option}\" option does not exist.`);\n        }\n      });\n    }\n\n    const result = await this.apiClient.sendRequest(\"getUserDetails\", data);\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n\n  /**\n   * Searches for a user by their username.\n   * Optionally allows for an exact match search.\n   * \n   * @param {string} username - The username to search for.\n   * @param {boolean} [exactResult=false] - Flag to indicate whether the search should return only an exact match.\n   * @returns {Promise<any>} - A promise resolving to the search results.\n   */\n  async search(username: string, exactResult: boolean = false) {\n    const startTime = Date.now();\n\n    const data = {\n      username: username\n    };\n\n    const result = await this.apiClient.sendRequest(\"searchUser\", data);\n    if (exactResult) {\n      if ((result.result).find((x: UserSearch) => (x.username).toLowerCase() == username.toLowerCase())) {\n        result.result = [(result.result).find((x: UserSearch) => (x.username).toLowerCase() == username.toLowerCase())];\n      } else {\n        result.resultCode = -1;\n        result.resultMessage = \"not found\";\n      }\n    }\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n\n  /**\n   * Sends a private message (PM) to a user.\n   * \n   * @param {number} targetUserID - The user ID of the recipient.\n   * @param {string} subject - The subject of the message.\n   * @param {string} body - The body/content of the message.\n   * @returns {Promise<any>} - A promise resolving to the result of the message sending request.\n   */\n  async sendMail(targetUserID: number, subject: string, body: string) {\n    const startTime = Date.now();\n\n    const data = {\n      receiverID: targetUserID,\n      subject: subject,\n      body: body,\n      mode: \"pm\"\n    };\n\n    const result = await this.apiClient.sendRequest(\"sendMessage\", data);\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n\n  /**\n   * Retrieves a ranking list based on a specified ranking type.\n   * Allows pagination and selection of the number of entries to return.\n   * \n   * @param {string} [type=\"globalRank\"] - The type of ranking to fetch. Types allowed: \"monthRank\", \"weekRank\", \"globalRank\", \"highestMonthRank\", \"highestWeekRank\", \"lastMonthRank\", \"lastWeekRank\".\n   * @param {number} [page=0] - The page number for pagination.\n   * @param {number} [numEntries=10] - The number of entries to retrieve per page.\n   * @returns {Promise<any>} - A promise resolving to the ranking data for the selected type.\n   */\n  async getRanking(type: string = \"globalRank\", page: number = 0, numEntries: number = 10) {\n    const startTime = Date.now();\n\n    if (numEntries > 50){\n      console.warn(\"The maximum number of entries allowed is 50.\");\n    } else if (numEntries < 5) {\n      console.warn(\"The minimum number of entries allowed is 5.\");\n    }\n\n    const data = {\n      type: type,\n      page: page,\n      numEntries: numEntries\n    };\n\n    if (!(this.rankingOptionsArray).includes(type)) {\n      return {\n        resultCode: -1,\n        resultMessage: \"incorrect option\",\n        result: `The ${type} type does not exist.`,\n        elapsedTime: (Date.now() - startTime),\n        receivedData: data\n      };\n    }\n\n    const result = await this.apiClient.sendRequest(\"getRankingFirefly\", data);\n    result.elapsedTime = (Date.now() - startTime);\n    return result;\n  }\n}\n","/**\n * The GameApi class provides methods to interact with a game's server.\n * It supports operations like retrieving game tokens, searching for games, and fetching game details.\n */\nexport class GameApi {\n    /**\n     * API client for sending requests to the server.\n     */\n    private apiClient: Record<string, any>;\n  \n    /**\n     * Supported server languages for filtering games.\n     */\n    public availableServerLanguages: string[];\n  \n    /**\n     * Creates an instance of the GameApi class.\n     *\n     * @param apiClient - An object that handles sending requests to the backend API.\n     */\n    constructor(apiClient: Record<string, any>) {\n      this.apiClient = apiClient;\n      this.availableServerLanguages = [\n        \"cs\", \"de\", \"el\", \"en\", \"es\", \"fr\", \"id\", \"it\", \"ja\", \"nl\", \"pl\", \"pt\", \"ru\", \"tr\",\n      ];\n    }\n  \n    /**\n     * Retrieves the token for a specific game.\n     *\n     * @param gameID - The identifier of the game.\n     * @returns A promise resolving to the game token or an error if the game is not found.\n     */\n    async getToken(gameID: number) {\n      const startTime = Date.now();\n      const data = { gameID };\n  \n      let result = await this.apiClient.sendRequest(\"getGameToken\", data);\n      if (result.resultCode !== 0) {\n        result = this.apiClient.errors.getError(\"game not found\");\n      }\n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Searches for games based on various filters.\n     *\n     * @param numEntries - Number of entries to fetch (min 5, max 50). Defaults to 10.\n     * @param page - The page number to fetch. Defaults to 0.\n     * @param lang - Language filter. Defaults to \"en\".\n     * @param filter - Search string for filtering. Optional.\n     * @param scenarioID - Scenario ID for filtering. Optional.\n     * @returns A promise resolving to the search results.\n     */\n    async search(\n      numEntries: number = 10,\n      page: number = 0,\n      lang: string = \"en\",\n      filter: string = \"\",\n      scenarioID: number | null = null\n    ) {\n      const startTime = Date.now();\n  \n      if (!this.availableServerLanguages.includes(lang)) {\n        console.warn(`Language ${lang} does not exist.`);\n        lang = \"en\";\n      }\n      if (numEntries > 50) {\n        console.warn(\"The maximum number of entries allowed is 50.\");\n      } else if (numEntries < 5) {\n        console.warn(\"The minimum number of entries allowed is 5.\");\n      }\n  \n      const data = {\n        numEntriesPerPage: numEntries,\n        page,\n        lang,\n        isFilterSearch: !!filter,\n        search: filter || null,\n        global: 1,\n        loadUserLoginData: 1,\n        scenarioID,\n      };\n  \n      const result = await this.apiClient.sendRequest(\"getGames\", data);\n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches original game overview. This call takes exceedingly longer, which is why {@link getOverview} was created.\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game overview.\n     */\n    async getOverviewOld(gameID: number) {\n      const startTime = Date.now();\n      const data = { gameID };\n  \n      const result = await this.apiClient.sendRequest(\"getGame\", data);\n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches a detailed overview of a game, including properties and player details.\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game overview or an error if the game is not found.\n     */\n    async getOverview(gameID: number) {\n      const startTime = Date.now();\n  \n      const properties = await this.apiClient\n        .sendRequest(\"getGames\", { gameID })\n        .then((result: any) => result.result[0]?.properties);\n  \n      const players = await this.getAdvancedDetails(gameID, 1);\n  \n      if (!properties || typeof players.result !== \"object\") {\n        return this.apiClient.errors.getError(\"game not found\");\n      }\n  \n      const realPlayers = Object.values(players.result.players).filter((x: any) => x.siteUserID > 1);\n  \n      const finalDictionary: any = realPlayers.reduce((dict: any, x: any) => {\n        dict[x.siteUserID] = {\n          siteUserID: x.siteUserID,\n          playerID: x.playerID,\n          login: x.userName,\n          nation: x.nationName,\n          teamID: x.teamID,\n        };\n        return dict;\n      }, {});\n  \n      const userDetails = await Promise.all(\n        Object.keys(finalDictionary).map((siteUserID) =>\n          this.apiClient.Users.getDetails(siteUserID)\n        )\n      );\n  \n      userDetails.forEach((user) => {\n        const userId = user.result.id;\n        if (finalDictionary[userId]) {\n          finalDictionary[userId].profile = user.result;\n        }\n      });\n  \n      const result = {\n        resultCode: 0,\n        resultMessage: \"ok\",\n        result: {\n          logins: Object.values(finalDictionary),\n          properties,\n        },\n        version: \"4831_live\",\n        elapsedTime: Date.now() - startTime,\n      };\n  \n      return result;\n    }\n\n    /**\n     * Fetches an overview of a game, only including properties.\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game overview or an error if the game is not found.\n     */\n    async getOverviewProperties(gameID: number) {\n      const startTime = Date.now();\n  \n      const properties = await this.apiClient\n        .sendRequest(\"getGames\", { gameID })\n        .then((result: any) => result.result[0]?.properties);\n    \n      if (!properties) {\n        return this.apiClient.errors.getError(\"game not found\");\n      }\n  \n      const result = {\n        resultCode: 0,\n        resultMessage: \"ok\",\n        result: properties,\n        version: \"4831_live\",\n        elapsedTime: Date.now() - startTime,\n      };\n  \n      return result;\n    }\n  \n    /**\n     * Fetches advanced game details based on state and state-specific options.\n     *\n     * @param gameID - The unique identifier for the game.\n     * @param stateID - The state ID to fetch. Defaults to 0 which equals all.\n     * @param stateOption - Additional state option. Optional.\n     * @returns A promise resolving to the game details or an error if the game is not found.\n     */\n    async getAdvancedDetails(gameID: number, stateID: number = 0, stateOption: number | null = null) {\n      const startTime = Date.now();\n  \n      const tokenRaw = await this.getToken(gameID);\n      if (tokenRaw.resultCode !== 0) {\n        return this.apiClient.errors.getError(\"game not found\");\n      }\n  \n      const token = tokenRaw.result.token;\n      const data = {\n        gameServer: token.gs,\n        stateID,\n        option: stateOption,\n        rights: token.rights,\n        userAuth: token.authHash,\n        tstamp: token.authTstamp,\n      };\n  \n      const result = await this.apiClient.sendGameRequest(gameID, data);\n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches game details with all states (stateID 0).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game details or an error if the game is not found.\n     */\n    async getDetails(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 0);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches players for a given game (stateID 1).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game players or an error if the game is not found.\n     */\n    async getPlayers(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 1);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches the newspaper for a specific day in the game (stateID 2).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @param day - The day to fetch the newspaper for.\n     * @returns A promise resolving to the game newspaper or an error if the game is not found.\n     */\n    async getNewspaper(gameID: number, day: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 2, day);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches all newspapers for a game (stateID 2).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to all the game newspapers or an error if the game is not found.\n     */\n    async getAllNewspaper(gameID: number) {\n      const startTime = Date.now();\n  \n      const resultLastDay = await this.getAdvancedDetails(gameID, 2);\n      const lastDay = resultLastDay.result.day;\n  \n      const allNewspaper = await Promise.all(\n        (Array.from({ length: lastDay + 1 }, (_, i) => i)).map((day) =>\n          this.getNewspaper(gameID, day).then((x) => {\n            return x.result;\n          })\n        )\n      );\n  \n      const result = {\n        resultCode: 0,\n        resultMessage: \"ok\",\n        result: allNewspaper,\n        version: \"4831_live\",\n        elapsedTime: Date.now() - startTime,\n      };\n  \n      return result;\n    }\n  \n    /**\n     * Fetches provinces data for a given game (stateID 3).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the provinces data or an error if the game is not found.\n     */\n    async getProvinces(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 3);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches a map with province statistics for a given game (stateID 3).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the map with province statistics or an error if the game is not found.\n     */\n    async getMap(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 3);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n\n    /**\n     * Fetches the scenario statistics for a game (stateID 12).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the scenario statistics or an error if the game is not found.\n     */\n    async getScenarioStatistics(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 12);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n    /**\n     * Fetches game-related statistics (stateID 30).\n     *\n     * @param gameID - The unique identifier for the game.\n     * @returns A promise resolving to the game statistics or an error if the game is not found.\n     */\n    async getStatistics(gameID: number) {\n      const startTime = Date.now();\n  \n      const result = await this.getAdvancedDetails(gameID, 30);\n  \n      result.elapsedTime = Date.now() - startTime;\n      return result;\n    }\n  \n  }\n  ","/**\n * Represents the API client for managing and retrieving information about alliances.\n */\nexport class AllianceApi {\n  /**\n   * The API client instance used to send requests.\n   */\n  private apiClient: Record<string, any>;\n\n  /**\n   * Constructs a new instance of the `AllianceApi` class.\n   * \n   * @param apiClient - The API client instance for sending requests.\n   */\n  constructor(apiClient: Record<string, any>) {\n    this.apiClient = apiClient;\n  }\n\n  /**\n   * Retrieves detailed information about a specific alliance.\n   * \n   * @param allianceID - The alliance's identifier.\n   * @param members - Whether to include the list of alliance members in the response. Defaults to `true`.\n   * @returns A promise resolving to the details of the specified alliance, including elapsed time.\n   */\n  async getDetails(allianceID: number, members: boolean = true) {\n    const startTime = Date.now();\n    const data = {\n      allianceID: allianceID,\n      members: members ? 1 : 0,\n      invites: 0,\n    };\n\n    const result = await this.apiClient.sendRequest(\"getAlliance\", data);\n    result.elapsedTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Retrieves battle statistics for a given alliance.\n   * \n   * @param allianceID - The alliance's identifier.\n   * @returns A promise resolving to the battle statistics of the specified alliance, including elapsed time.\n   */\n  async getBattles(allianceID: number) {\n    const startTime = Date.now();\n    const data = {\n      allianceID: allianceID,\n    };\n\n    const result = await this.apiClient.sendRequest(\"getAllianceBattleStats\", data);\n    result.elapsedTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Searches for alliances by name.\n   * \n   * @param name - The name of the alliance to search for.\n   * @param exactResult - Whether to return only exact matches for the alliance name. Defaults to `false`.\n   * @returns A promise resolving to the search results, including elapsed time.\n   * If `exactResult` is `true`, only exact matches are returned.\n   * If no matches are found, the result code and message indicate \"not found.\"\n   */\n  async search(name: string, exactResult: boolean = false) {\n    const startTime = Date.now();\n    const data = {\n      name: name,\n    };\n\n    const result = await this.apiClient.sendRequest(\"searchAlliance\", data);\n    if (exactResult) {\n      const exactMatch = (result.result).find(\n        (x: AllianceSearch) => x.properties.name.toLowerCase() === name.toLowerCase()\n      );\n      if (exactMatch) {\n        result.result = [exactMatch];\n      } else {\n        result.resultCode = -1;\n        result.resultMessage = \"not found\";\n      }\n    }\n    if ((result.result).length === 0) {\n      result.resultCode = -1;\n      result.resultMessage = \"not found\";\n    }\n    result.elapsedTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Retrieves the alliance ranking, paginated by the specified page and number of entries.\n   * \n   * @param page - The page of the ranking to retrieve. Defaults to `0`.\n   * @param numEntries - The number of entries to retrieve per page. Defaults to `10`.\n   *                     Must be between `10` and `50`. If out of range, a warning is logged.\n   * @returns A promise resolving to the alliance ranking, including elapsed time.\n   */\n  async getRanking(page: number = 0, numEntries: number = 10) {\n    const startTime = Date.now();\n\n    if (numEntries > 50) {\n      console.warn(\"The maximum number of entries allowed is 50.\");\n    } else if (numEntries < 10) {\n      console.warn(\"The minimum number of entries allowed is 10.\");\n    }\n\n    const data = {\n      page: page,\n      numEntries: numEntries,\n    };\n\n    const result = await this.apiClient.sendRequest(\"getAllianceRanking\", data);\n    result.elapsedTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Retrieves a list of open alliances. The result typically includes 30 alliances\n   * that are not full, but the response cannot be further filtered.\n   * \n   * @returns A promise resolving to the list of open alliances, including elapsed time.\n   */\n  async getOpenAlliances() {\n    const startTime = Date.now();\n    const data = {};\n\n    const result = await this.apiClient.sendRequest(\"getAlliances\", data);\n    result.elapsedTime = Date.now() - startTime;\n    return result;\n  }\n}\n\n/**\n * Type representing the structure of an alliance search result.\n */\ntype AllianceSearch = {\n  \"@c\": string;\n  properties: Record<any, any>;\n  stats: Record<any, any>;\n};\n"],"mappings":"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","names":["result","puppeteer","config"]}